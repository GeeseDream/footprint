类的继承
========

继承是面向对象程序设计的三个基本原则之一

体现了类与类之间的“is-a”关系。

继承
-----

被继承的类被称为超类或父类，继承类被称为子类。子类继承了超类定义的所有变量和方法，并且子类可以定义自己的方法和变量。
子类依然可以有子类，但是子类只能有一个直接的超类。在子类当中不能访问父类声明为私有的方法和变量，类不能自己继承自己。

子类构造函数的第一条语句必须是super()，如果要调用父类有参数的构造函数需要为super()指定参数。
在多层次的继承中，构造函数按继承的顺序列执行。不写super()的时候默认执行每个超类无形参构造函数。

super也用于子类中调用父类的变量和方法，子类变量或方法与父类重名的情况必须使用super。

子类对象的引用赋给超类引用变量时，因为超类不知道子类的实现，所以只能访问超类定义的部分。

方法重写
--------

当子类中的方法与其超类中的方法具有相同的返回类型和签名时，就称子类中的方法重写（override）了超类中的方法。
当在子类中调用被重写的方法时，总是引用子类中定义的方法，而超类中定义的方法将被隐藏。要访问超类的被重写方法可以使用super。

方法重写只在两个方法的签名一致时才发生，被声明为final的方法不能被重写。

超类引用调用被重写的方法时，Java会根据在调用发生时引用的对象的类型来判断所要执行的方法。
当引用不同类型的对象时，将调用被重写方法的不同版本。
被引用对象的类型决定了所要执行的被重写方法。
